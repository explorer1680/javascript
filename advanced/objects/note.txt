In JavaScript, Everything is an object. (well, almost everything)
we have primitives and objects.
Arrays, Functions are all objects in javascript.

constructor or prototype(they are same in javascript, in another programming language, it is called class)
 Constructor --> instances

Inheritance

javascript is a prototype based language, it means the inheritance works by using something called prototype.
it means, each and every javascript objects has a prototype property.

(Note, the Inheritance here is not same as java. It like static method or static field in java.) this statement may not correct.
You can still expect the same idea of inheritance as Java, but, 
1. the inheritance in javascript is not limited to that idea, anything related with prototype is inheritance in javascript.
2. the inheritance is done by prototype in javascript.

Here, the constructor is 'Class' in java.
The instance of constructor has a '__proto__' property, you can check this by javascript console;
The constructor has a 'prototype' property, you can set this property in javascript;
The above two property is same, you can check in javascript console by:
    john2.__proto__ === Person2.prototype
When you define method or property in Person2's 'prototype' property
These method or property are available to all Person2's instance.
This is call inheritance of javascript.

it seems that the constructor method automatically added to prototype.


The Person object is constructor(constructor is also a object), and John is its instance.
If we want to John to inheritance a method or property from the Person object, we have to add that method or property to Person's
prototype property.
following statement is not very clear, it means that when you define something inside Person's prototype property, 
these method or property are used by its instance not by itself.
(Note here, the Person's prototype is not the prototype of the Person itself, but of all instance created by Person's constructor.
the Person's(constructor's) prototype property is prototype of its instances.
Person itself is an instance of bigger constructor (object).

the prototype chain:
javascript search method or property in its own first, if it can't find it, it will try to find it in its prototype, 
which is prototype property of its parent(constructor). It will up to Object, then go to 'null'. 'null' don't have prototype. 
In this case, undefined is returned.

JavaScript console is a very powerful tool to inspect object chain.
It is not a tool to show the (Type, or Constructor, Class) chain clearly. (only show the type of your instance at the first layer)
Example, it show john2 is type of Person2 in first layer, but, it not show Person2 is type of Object directly. 
It show '__proto__' chain, but, that chain is just a json object structure.
operation:
chean the code in console. (press the first icon in 'Console')
the '__proto__' is the prototype of the instance, which is the prototype property of the constructor.

in Chrome console, the '__proto__' show the prototype chain.
'__proto__: Person' not means this object's prototype is of type Person, (it show the chain, search in '__proto__' then search in 
Person's prototype) or in another way:
It means this object('__proto__'), its '__proto__' is Person.prototype.

we can do this:
john2.hasOwnProperty('job'): true
john2.hasOwnProperty('lastName'): false

john2 instanceof Person2: true ('instanceof' is keyword)

Object.create()
this method create instance with the prototype as the first parameter.
the function constructor way create instance with the prototype as the Person's 'prototype' property.


4(3) way to create object:
1:
{a: 'a', b: 'b'}

2:
var Jane = new Object();
Jane.name = 'Jane';
Jane.lastName = 'Smith';

3: 
var Person = function(name, yearOfBirth, job){
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    ...
}
var john = new Person('John', 1991, 'teacher');

4:
var personProto = {
    calculateAge: function(){
        console.log(2017 - this.yearOfBirth);
    }
}

var john3 = Object.create(personProto);

2 and 3 is same.

do we have a way to create object like:
var x = Person.create(); //or
var x = Person.create(personProto);
no, it is a runtime error.

primitives vs object.
the big difference between them is the variable containing the primitives holding that data inside the variable itself.
variable associated with object do not contain the objects, it tontain the reference in the memoery where the object sits.

for function, when pass primitives, it is simple copy as created, the change will not affect outside, 
when we pass the object, the reference is passed. 