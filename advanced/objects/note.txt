In JavaScript, Everything is an object. (well, almost everything)
we have primitives and objects.
Arrays, Functions are all objects in javascript.

constructor and prototype
you define the Person function, it will have a property called 'prototype'.
you can not find it when you log instance created by new Person(), or log Person directly.
but you can log Person.prototype, when you log this object, it will include a property called: 'constructor', it is same as Person.
Person === Person.prototype.constructor

(Please note, in javascript ES5, there is no concept 'class' it is just 'object'. 
Using 'new' before a function expression, you get an object, without 'new', it is just a normal function call.)

When we use Function to create instance, we call it constructor. 

Constructor --> instances

Inheritance

The concept 'Inheritance' is not same java, in java, it is relationship between super class and sub class.
It is between Constructor and instance.
It is a way to define method in Constructor's prototype property.
It has the same result as define the method inside of Constructor by 
    this.method_name = function(){...}
The difference is: the prototype way has only 1 method object shared by all instance, but the Constructor way have different function object for each instance.
Here, the instance inherit method from Constructor.



Here, the constructor is 'Class' in java. (if you call it without 'new' keyword, it is just a normal juction expression)
The instance of constructor has a '__proto__' property, you can check this by javascript console;
The constructor has a 'prototype' property, you can set this property in javascript;
The above two property is same, you can check in javascript console by:
    john2.__proto__ === Person2.prototype
When you define method or property in Person2's 'prototype' property
These method or property are available to all Person2's instance.
This is call inheritance of javascript.


The Person object is constructor(constructor is also a object), and John is its instance.
If we want John to inherit a method or property from the Person object, we have to add that method or property to Person's
prototype property. (we can see here, the inherit is not same Java, it is the relationship between Constructor and Instance)


Person itself is an instance of bigger constructor (object).

the prototype chain:
javascript search method or property in its own first, if it can't find it, it will try to find it in its __proto__, 
which is prototype property of its class(constructor). It will up to Object, then go to 'null'. 'null' don't have prototype. 
In this case, undefined is returned.

JavaScript console is a very powerful tool to inspect object chain.
Example, it show john2 is type of Person2 in first layer.
It show '__proto__' chain:
__proto__: Object means:    Athlete5.prototype = Object.create({a: 'a'}) or Athlete5.prototype never changed.
__proto__: Person5 means:   Athlete5.prototype = Object.create(Person5.prototype), in this case:
    Athlete5.prototype.__proto__ === Person5.prototype
    johnAthlete5.__proto__.__proto__ === Person5.prototype
__proto__: Function means:  Athlete5.prototype = Object.create(Person5)
operation:
clean the code in console. (press the first icon in 'Console')


in Chrome console, the '__proto__' show the prototype chain.
'__proto__: Person' not means this object's prototype is of type Person, (it show the chain, search in '__proto__' then search in 
Person's prototype) or in another way:
It means this object('__proto__'), its '__proto__' is Person.prototype.

we can do this:
john2.hasOwnProperty('job'): true
john2.hasOwnProperty('lastName'): false

john2 instanceof Person2: true ('instanceof' is keyword)

Object.create()
this method create instance with the prototype defined by object passed as the first parameter of create method.
the function constructor way create instance with the prototype as the Person's 'prototype' property.


4(3) way to create object:
1:
{a: 'a', b: 'b'}

2:
var Jane = new Object();
Jane.name = 'Jane';
Jane.lastName = 'Smith';

3: 
var Person = function(name, yearOfBirth, job){
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    ...
}
var john = new Person('John', 1991, 'teacher');

4:
var personProto = {
    calculateAge: function(){
        console.log(2017 - this.yearOfBirth);
    }
}

var john3 = Object.create(personProto);

2 and 4 are same. (not same, 2 use key word 'new', 4 use Object.create())
I think 2 and 3 are same.

do we have a way to create object like:
var x = Person.create(); //or
var x = Person.create(personProto);
no, it is a runtime error.
Basically, the Person is an function object, we(I) can't find a way to define a function for a function objects.
In, ES6, classes, the static method is a way to do it.

primitives vs object.
the big difference between them is the variable containing the primitives holding that data inside the variable itself.
variable associated with object do not contain the objects, it contain the reference in the memoery where the object sits.

for function, when pass primitives, it is simply copy as created, the change will not affect outside, 
when we pass the object, the reference is passed. 

how to create object with variable:

var key = 'abc'
var obj = {
    key: '123'
}
with ES6 and Babel:
{
    [key]: '123'
}

https://stackoverflow.com/questions/11508463/javascript-set-object-key-by-variable